c
t > target
n
t < target
q
n
target
 t < target
t
q
c
q
is_valid?(s)
n
is_valid?(s[right])
is_valid?(s[left])
c
is_valid?(s[right])
is_valid?(s[left])
c
srt
c
s
"Z".ord
<= "Z"
"A".ord
code
"A".ord <= code && code <= "Z".ord
c
"A".ord <= code <= "Z".ord
48 <= code && code <= 57
code
c
is_valid?(" ")
is_valid?(s[left])
c
" ".ord 
"Z".ord
"A".ord
"a".ord
is_valid?("a")
is_valid?("*")
is_valid?(":")
is_valid?(" ")
is_valid?(s[left])
q
s[right].match(/^[[:alpha:]]$/) 
s[left].match(/^[[:alpha:]]$/)
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
s[right]
s[left]
q
s[right]
s[left]
c
n
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
s[right]
s[left]
c
s[right].downcase
s[left].downcase
n
 s[right]
s[left]
c
s[right].match(/^[[:alpha:]]$/) 
s[left].match(/^[[:alpha:]]$/)
n
s[right].match(/^[[:alpha:]]$/)
n
 s[left]
n
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
s[right]
s[left]
c
s[right]
s[left]
c
s[right]
s[left]
n
 s[right].match(/^[[:alpha:]]$/)
n
s[left].match(/^[[:alpha:]]$/)
s[left]
n
s[right]
s[left]
n
s[right].match(/^[[:alpha:]]$/)
s[right]
n
 s[left].match(/^[[:alpha:]]$/)
n
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
s[left]
s[right]
right
left
c
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
right
left
c
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
left
c
 s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
s.size
right
left
c
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
c
s[left].match(/^[[:alpha:]]$/) != nil && s[right].match(/^[[:alpha:]]$/) != nil
q
s[right].downcase
s[left].downcase
c
s[left].match(/^[[:alpha:]]$/) == nil
c
s[left].match(/^[[:alpha:]]$/) == nil
s[left].match(/^[[:alpha:]]$/)
s[left].match(/^[[:alpha:]]$/) != nil
s[left].match(/^[[:alpha:]]$/)
s[left].match(/^[[:alpha:]]$/).present?
s[left].match(/^[[:alpha:]]$/)
s[right].match(/^[[:alpha:]]$/)
s[left].match(/^[[:alpha:]]$/)
c
 s[right]
s.size
s.count
right
left
q
right
left
q
s[l]
l
s[r].downcase
s[l].downcase
q
c
q
s[r]
s[l]
q
continue
s[r].match(/^[[:alpha:]]$/)
s[r]
r
c
result
c
result
c
result
c
q
result
str
n
str.size
c
str
str.size
c
result + string_size.to_s + str
string_size = str.size
string_size = str.count
str.size
str.length
str.lenght
str
s
string_size = s.count
q
c
cc
c
rows
cols
c
rows
cols
c
q
board[r][col]
col
c
cols[col]
cols[r]
c
 cols[r]
q
c
cols[col]
cols[r]
c
board[r][col]
cols[r]
q
board[r][col]
(board[r][col]
r
col
cols[col]
cols[r]
c
cols[col]
cols[r]
c
cols[col]
r
col
board[r][col]
cols[col]
cols[col].include?(board[r][col])
rows[r].include?(board[r][col]) 
c
q
rows[1]
rows[2]
rows[0]
rows[0].push(1)
rows[0].push(2)
rows = Hash.new {|h,k| h[k] = [] }
s[1] << [2]
s[1] << 2
s[1]
s = {}
h = {}
rows[2]
rows[1]
rows[0]
rows[0].push(2)
rows[0].push(1)
rows = Hash.new(Array.new)
rows[4]
rows[3]
rows[2]
rows
rows[2]
rows[1]
rows[0]
rows[0].push(2)
rows[0].push(1)
rows[0].add(1)
rows = Hash.new([])
cols[3]
cols[2]
cols[1]
